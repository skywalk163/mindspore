---
 include/cuco/detail/pair.cuh |  3 +--
 include/cuco/traits.hpp      | 23 +----------------------
 2 files changed, 2 insertions(+), 24 deletions(-)

diff --git a/include/cuco/detail/pair.cuh b/include/cuco/detail/pair.cuh
index 7ea3988..ade6df3 100644
--- a/include/cuco/detail/pair.cuh
+++ b/include/cuco/detail/pair.cuh
@@ -131,8 +131,7 @@ template <typename pair_type,
           typename value_type = typename pair_type::second_type>
 constexpr bool is_packable()
 {
-  return not std::is_void<packed_t<pair_type>>::value and
-         std::has_unique_object_representations_v<pair_type>;
+  return false;
 }
 
 /**
diff --git a/include/cuco/traits.hpp b/include/cuco/traits.hpp
index 445a40d..948b587 100644
--- a/include/cuco/traits.hpp
+++ b/include/cuco/traits.hpp
@@ -34,28 +34,7 @@ namespace cuco {
  * other `NaN` bit patterns.
  *
  */
-template <typename T, typename = void>
-struct is_bitwise_comparable : std::false_type {
-};
 
-/// By default, only types with unique object representations are allowed
 template <typename T>
-struct is_bitwise_comparable<T, std::enable_if_t<std::has_unique_object_representations_v<T>>>
-  : std::true_type {
-};
-
-template <typename T>
-inline constexpr bool is_bitwise_comparable_v = is_bitwise_comparable<T>::value;
-
-/**
- * @brief Declares that a type `Type` is bitwise comparable.
- *
- */
-#define CUCO_DECLARE_BITWISE_COMPARABLE(Type)           \
-  namespace cuco {                                      \
-  template <>                                           \
-  struct is_bitwise_comparable<Type> : std::true_type { \
-  };                                                    \
-  }
-
+inline constexpr bool is_bitwise_comparable_v = true;
 }  // namespace cuco
