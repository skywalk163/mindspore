---
 include/cuco/dynamic_map.cuh | 62 ++++++++++++++++++++++++++++++++++--
 include/cuco/traits.hpp      |  2 +-
 2 files changed, 60 insertions(+), 4 deletions(-)

diff --git a/include/cuco/dynamic_map.cuh b/include/cuco/dynamic_map.cuh
index 866f948..af3ea03 100644
--- a/include/cuco/dynamic_map.cuh
+++ b/include/cuco/dynamic_map.cuh
@@ -103,8 +103,8 @@ class dynamic_map {
   using key_type        = Key;                               ///< Key type
   using mapped_type     = Value;                             ///< Type of mapped values
   using atomic_ctr_type = cuda::atomic<std::size_t, Scope>;  ///< Type of atomic counters
-  using view_type = typename static_map<Key, Value, Scope>::device_view;  ///< Device view type
-  using mutable_view_type = typename static_map<Key, Value, Scope>::device_mutable_view;
+  using view_type = typename static_map<Key, Value, Scope, Allocator>::device_view;  ///< Device view type
+  using mutable_view_type = typename static_map<Key, Value, Scope, Allocator>::device_mutable_view;
   ///< Device mutable view type
 
   dynamic_map(dynamic_map const&) = delete;
@@ -248,6 +248,62 @@ class dynamic_map {
    */
   float get_load_factor() const noexcept { return static_cast<float>(size_) / capacity_; }
 
+  /**
+   * @brief Update the size of the hash map.
+   *
+   * @param size The number of the size to be updated.
+   */
+  void update_size(std::size_t size) {
+    size_ = size;
+  }
+
+  /**
+   * @brief Update the size of the submap.
+   *
+   * @param submap_idx The index of submap whose size need to be updated.
+   * @param size The number of the size of submap to be updated.
+   */
+  void update_submap_size(std::size_t submap_idx, std::size_t size) {
+    submaps_[submap_idx]->size_ = size;
+  }
+
+  /**
+   * @brief Gets the all submaps of the hash map.
+   *
+   * @return The all submaps of the hash map.
+   */
+  const std::vector<std::unique_ptr<static_map<key_type, mapped_type, Scope, Allocator>>>& get_submaps() const noexcept {
+    return submaps_;
+  }
+
+  /**
+   * @brief Gets the all mutable views for all submaps of the hash map.
+   *
+   * @return All mutable views for all submaps of the hash map.
+   */
+  thrust::device_vector<mutable_view_type>& get_submap_mutable_views() noexcept { return submap_mutable_views_; }
+
+  /**
+   * @brief Gets the all mutable views for all submaps of the hash map.
+   *
+   * @return All mutable views for all submaps of the hash map.
+   */
+  thrust::device_vector<view_type>& get_submap_views() noexcept { return submap_views_; }
+
+  /**
+   * @brief Gets the max load factor of the hash map.
+   *
+   * @return The max load factor of the hash map.
+   */
+  float get_max_load_factor() const noexcept { return max_load_factor_; }
+
+  /**
+   * @brief Gets minimum insert size of the hash map.
+   *
+   * @return The minimum insert size of the hash map.
+   */
+  std::size_t get_min_insert_size() const noexcept { return min_insert_size_; }
+
  private:
   key_type empty_key_sentinel_{};       ///< Key value that represents an empty slot
   mapped_type empty_value_sentinel_{};  ///< Initial value of empty slot
@@ -255,7 +311,7 @@ class dynamic_map {
   std::size_t capacity_{};              ///< Maximum number of keys that can be inserted
   float max_load_factor_{};             ///< Max load factor before capacity growth
 
-  std::vector<std::unique_ptr<static_map<key_type, mapped_type, Scope>>>
+  std::vector<std::unique_ptr<static_map<key_type, mapped_type, Scope, Allocator>>>
     submaps_;                                      ///< vector of pointers to each submap
   thrust::device_vector<view_type> submap_views_;  ///< vector of device views for each submap
   thrust::device_vector<mutable_view_type>
diff --git a/include/cuco/traits.hpp b/include/cuco/traits.hpp
index 948b587..b7fbbc4 100644
--- a/include/cuco/traits.hpp
+++ b/include/cuco/traits.hpp
@@ -16,7 +16,7 @@
 
 #pragma once
 
-#include <type_traits>
+// #include <type_traits>
 
 namespace cuco {

