/**
 * Copyright 2022 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef MINDSPORE_NNACL_FP32_ACTIVATION_@SIMD_INSTRUCTION@_H_
#define MINDSPORE_NNACL_FP32_ACTIVATION_@SIMD_INSTRUCTION@_H_

#include "nnacl/intrinsics/ms_simd_instructions.h"
#include "nnacl/intrinsics/ms_simd_@SIMD_INSTRUCTION_LOWER@_instructions.h"

#ifdef __cplusplus
extern "C" {
#endif
@SIMD_INSTRUCTION_BEGIN@

static inline int BatchNormFp32@SIMD_INSTRUCTION@(int index, const float *input, const float *mean,
  const float *variance, int channel, float epsilon, float *output) {
  for (int block_max_size = channel - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 input_data = SIMD_LD_F32(input + index);
    SIMD_F32 mean_ = SIMD_LD_F32(mean + index);
    SIMD_F32 variance_ = SIMD_LD_F32(variance + index);
    SIMD_F32 variance_sqrt = SIMD_SQRT_F32(SIMD_ADD_F32(variance_, SIMD_MOV_F32(epsilon)));
    SIMD_F32 output_data = SIMD_DIV_F32(SIMD_SUB_F32(input_data, mean_), variance_sqrt);
    SIMD_ST_F32(output + index, output_data);
  }
  return index;
}

static inline int FusedBatchNormFp32@SIMD_INSTRUCTION@(int index, const float *input, const float *scale,
  const float *offset, const float *mean, const float *variance, int channel, float epsilon, float *output) {
  for (int block_max_size = channel - BLOCK_NUM + 1; index < block_max_size; index += BLOCK_NUM) {
    SIMD_F32 input_data = SIMD_LD_F32(input + index);
    SIMD_F32 scale_ = SIMD_LD_F32(scale + index);
    SIMD_F32 offset_ = SIMD_LD_F32(offset + index);
    SIMD_F32 mean_ = SIMD_LD_F32(mean + index);
    SIMD_F32 variance_ = SIMD_LD_F32(variance + index);
    SIMD_F32 variance_sqrt = SIMD_SQRT_F32(SIMD_ADD_F32(variance_, SIMD_MOV_F32(epsilon)));
    SIMD_F32 norm_val = SIMD_DIV_F32(SIMD_SUB_F32(input_data, mean_), variance_sqrt);
    SIMD_F32 output_data = SIMD_ADD_F32(SIMD_MUL_F32(norm_val, scale_), offset_);
    SIMD_ST_F32(output + index, output_data);
  }
  return index;
}

@SIMD_INSTRUCTION_END@
#ifdef __cplusplus
}
#endif
#endif
