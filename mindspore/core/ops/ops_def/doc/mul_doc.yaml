mul:
    description: |
        Multiplies two tensors element-wise.

        .. math::
        
            out_{i} = input_{i} * other_{i}
    
        Note:
            - When the two inputs have different shapes,
              they must be able to broadcast to a common shape.
            - The two inputs can not be bool type at the same time,
              [True, Tensor(True, bool\_), Tensor(np.array([True]), bool\_)] are all considered bool type.
            - The two inputs comply with the implicit type conversion rules to make the data types
              consistent.
    
        Args:
            input (Union[Tensor, number.Number, bool]): The first input is a number.Number or
                a bool or a tensor whose data type is
                `number <https://www.mindspore.cn/docs/en/r2.3/api_python/mindspore.html#mindspore.dtype>`_ or
                `bool_ <https://www.mindspore.cn/docs/en/r2.3/api_python/mindspore.html#mindspore.dtype>`_.
            other (Union[Tensor, number.Number, bool]): The second input, which is a number.Number or
                a bool or a tensor whose data type is
                `number <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_ or
                `bool_ <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_.
    
        Returns:
            Tensor, the shape is the same as the one after broadcasting,
            and the data type is the one with higher precision or higher digits among the two inputs.
    
        Raises:
            TypeError: If `input` and `other` is not one of the following: Tensor, number.Number, bool.
            ValueError: If `input` and `other` are not the same shape.
    
        Supported Platforms:
            ``Ascend`` ``GPU`` ``CPU``
    
        Examples:
            >>> import mindspore
            >>> import numpy as np
            >>> from mindspore import Tensor, ops
            >>> x = Tensor(np.array([1.0, 2.0, 3.0]), mindspore.float32)
            >>> y = Tensor(np.array([4.0, 5.0, 6.0]), mindspore.float32)
            >>> output = ops.mul(x, y)
            >>> print(output)
            [ 4. 10. 18.]
