abs:
    description: |    
        Returns absolute value of a tensor element-wise.

        .. math::

            out_i = |input_i|

        Args:
            input (Tensor): The input tensor. The shape of tensor is
                :math:`(N,*)` where :math:`*` means, any number of additional dimensions.

        Returns:
            Tensor, has the same shape as the `input`.

        Raises:
            TypeError: If `input` is not a Tensor.

        Supported Platforms:
            ``Ascend`` ``GPU`` ``CPU``

        Examples:
            >>> import mindspore
            >>> import numpy as np
            >>> from mindspore import Tensor, ops
            >>> input = Tensor(np.array([-1.0, 1.0, 0.0]), mindspore.float32)
            >>> output = ops.abs(input)
            >>> print(output)
            [1. 1. 0.]

argmin:
    description: |
        Returns the indices of the minimum value along a specified `axis` of a Tensor.

        If the shape of input tensor is :math:`(x_1, ..., x_N)`, the shape of the output tensor is
        :math:`(x_1, ..., x_{axis-1}, x_{axis+1}, ..., x_N)`.

        Args:
            axis (int): Axis where the Argmin operation applies to. Default: ``-1`` .
            output_type (:class:`mindspore.dtype`): Output data type.
                Supported types: ``mstype.int32`` , ``mstype.int64`` . Default: ``mstype.int32`` .

        Inputs:
            - **input_x** (Tensor) - Input tensor.
              The shape is :math:`(N, *)` where :math:`*` means, any number of additional dimensions.

        Outputs:
            Tensor, whose dtype is determined by `output_type`.

        Raises:
            TypeError: If `axis` is not an int.
            TypeError: If `output_type` is neither int32 nor int64.

        Supported Platforms:
            ``Ascend`` ``GPU`` ``CPU``

        Examples:
            >>> import mindspore
            >>> import numpy as np
            >>> from mindspore import Tensor, ops
            >>> input_x = Tensor(np.array([2.0, 3.1, 1.2]), mindspore.float32)
            >>> index = ops.Argmin()(input_x)
            >>> print(index)
            2
